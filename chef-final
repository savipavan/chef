Chef Server Installation:
-------------------------
The Chef Server is the central location which acts as an artifact repository or "hub" that stores cookbooks, cookbook versions, facts about the node, data bags and metadata information about nodes.
All metadata of a node, when it is registered with Chef server, is stored on the Chef server.
The metadata is populated and sent to the server with chef-client, which is an application that runs on the node.
Configuration enforcement is not handled by Chef Server, instead the desired state configuration is enforced when chef-client runs and a "convergence" happens, allowing for easy scalability.

Demo:
build centos 7 VM through vagrant file

wget https://packages.chef.io/files/current/chef-server/12.17.33/el/7/chef-server-core-12.17.33-1.el7.x86_64.rpm

rpm -Uvh chef-server-12.17.33.-1.e17.x86_64.rpm

chef-server-ctl reconfigure

#Create administrator user to manage chef infrastructure.
chef-server-ctl user-create kumar pavan kumar savipavan@gmail.com 'Password' --filename kumar-rsa

#create organization:
chef-server-ctl org-create pavanaccademy 'Pavan Accademy. Inc' --association_user pavan --filename pavan-validator.pem

#Install chef GUI
chef-server-ctl install chef-manage

reconfigure and accept license agreement
chef-server-ctl reconfigure

GUI login:
https://ipaddress/login

Setting up the Work Station
---------------------------
Login to the Chef Console --> Click on Administration --> Click on Organization --> Click on Starter Kit --> Proceed --> 

Start new server and connect the work station --> 
copy the starter kit -->  into workstation
scp chef-starter.zip vagrant@192.168.1.16:~/

yum install unzip

unzip chef-starter.zip
rm -rf chef-starter.zip
cd chef-repo
ls -la
cd .chef
cat knife.rb

knife ssl fetch

on agent 
---------
login ssh
proviede root permissions to the user account
usermod -g wheel vagrant

on workstation:


Boot strap ( run below command inside chef-repo)
#knife bootstrap 192.168.61.13 -N centos-node1 --ssh-user root --sudo 

on console: we can see the node

Node Object: The node object is made up of groups of attributes and the node run-lists
An attribute is a specific piece of data about the node.
- CPU information
- IP Address
- Hostname

Attributes are collected by a tool called ohai, 
- Chef-client automatically executes ohai and stores the data about a node in an object.
- This node object information can be used within the recipes named node.
- This information combined with the nodes run-lists is called the node object
- The node object is stored in a JSON file on the server.

Working with Ohai and Node Attributes:

#ohai
#ohai ipaddress
#ohai hostname
#ohai | grep ipaddress
#ohai cpu
#ohai | grep swap
#ohai platform

#ohai platform_family

On workstation:
cd chef-repo
cd cookbooks
#create chef recipes

#upload recipe in to server
knife recipe upload learn.rb

#add recipe in to node runlist
knife node run_list add <node ip or dns> 'recipe[learn.rb]'

on a client :
chef-client

693.3 Understanding Search
--------------------------
Search : Chef Search allows a search from either knife or within a recipe in order to search any data that is indexed by the Chef Server
Data is stored within Chef server indexes.
1. Client
2. Data bags
3. Environments
4. Nodes
5. Roles

Knife Query Syntax:
knife search INDEX "key:search_pattern"

Note: If no index is passed, then the default "node" is applied.
Key is a field name found in the JSON description of an indexable object on the chef server and search_pattern defines what will be searched for.

Index can either be a role, node, client, environment, or data bag.
The search pattern can include certain regular expressions to form a search query. This is supported in knife as well as when using search within a recipe.

Using Search For Dynamic Orchestration:
Scenario: Discover all nodes with a role of "web" and add them to a load balancer.
Web_nodes = search('role', 'role:web')
Role = The index we are going to search
Role:web=The key: search_pattern

Search:
knife search node 'platform_family:rhel'
knife search node 'recipes:apache\:\:default'
knife search node 'platform:centos or platform:debian'

Regular Expressions in search:

knife search node 'platform*:ubunut'
knife search node 'platfor?:centos'
knife search 'network_interfaces_address:*'

*-Replaces zero or more characters with a wildcard
?-replaces a single character with a wildcard

Search Flags:
-i will show the node ID
-a attribute_name will display the specified attribute from the search query results
-r will show the run-lists for the query results

knife search '*:*'-r
Will yield the same result as 
knife search '*:*' - run_list

knife search:
-------------
on workstation:
knife search 'platform_family:rhel'
knife search 'recipes:apache'
knife search 'recipes:apache\:\:websites'
knife search 'recipes:apache\:\:websites*'
knife search node 'platfor?:centos'
knife search node 'platfor?:centos' -a hostname
knife search "*:*" #search all nodes
knife search "*" -a ipaddress
knife search "*:*" -a run_list
knife search role "role:web" -a run_list
knife search "*:*" -a recipes

1. Building A quick apache cookbook
------------------------------------
on workstation (inside chef-repo)
chef generate cookbook cookbooks/apache
cd cookbooks
cd apache
ls
vi metadata.rb
	maintainer:
	mainteiner email:
:wq!

cd recipes
vi default.rb(contains basic information)
package 'apache2' do
	package_name 'httpd'
	action :install
end

service 'apache2' do
	service_name 'httpd'
	action [:start, :enable]
end

:wq!

ruby -c default.rb
foodcritic default.rb

vim websites.rb
file 'default www' do
	path 'var/www/html/index.html'
	content 'Hello World!'
:wq!

ruby -C websites.rb
foodcritic websites.rb

cd ..
cd ..(go cookbooks dir)

foodctitic apache

#on cookbooks directory
#knife cookbook upload apache

git .
git commit -am "added basic japache cookbook"
git push -u origin master

on console:
we can find out our uploaded apache module

2. Managing Node Run_Lists:

connect to node
login with root user

on chef-repo dir
#knife node list

add run list
#knife node run_list add centos-node1 'recipe[apache]'

#knife node show centos-node1

#knife node show -l centos-node1

run chef-convergence locally on node
on node1
--------
why run mode(noop)
chef-client --why-run
systemctl status httpd(for checking)

#run chef-client
chef-client

verificatiion
#systemctl status httpd

Default apache page has not changed
vi default.rb

(modify and add in to the default.rb)

include_recipe 'apache::websites'

:wq!

vi metadata.rb
(change the version)

#knife cookbook upload apache

run chef-client on node
#chef-client
open the server webpage in IE

on workstation:
vi default.rb
(remove include_recipe)
:wq!

adding manually added to the run_list

#knife cookbook upload apache

#knife node show centos-node1
#knife node run_list add centos-node1 'recipe[apache::websites]'

let apache website recipe to apply before apache default recipe
#knife node run_list add centos-node1 'recipe[apache::websites]' -b recipe[apache]

remove run_list
knife node run_list remove centos-node1 'recipe[apache::websites],recipe[apache]'

chef-client
nothing will updated when we run chef-client

add run_list back to node
knife node run_list add centos-node1 'recipe[apache],recipe[apache::websites]'

3. Chef-Client configuration:
-----------------------------
cd /etc/chef
vi client.rb
cd trusted_certs

chef-client 

1. Setting up a new node:
-------------------------
provision new node

on workstation:

Boot strap ( run below command inside chef-repo)
#knife bootstrap 192.168.61.14 -N centos-node2 --ssh-user root --sudo

#knife node show centos-node2

cd cookbooks
chef generate cookbook postgresql
cd postgresql/recipes/
vi default.rb

package 'postgresql-server' do
	notifies: run, 'execute[postgresql-init]'
end

execute 'postgresql-init'
	command 'postgresql-setup initdb'
	action :nothing
end

service 'postgresql' do	
	action [:enable, :start]
end

foodcritic default.rb

git add .
git commit -am "added the postgresql cookbook"
git push origin master

2. Roles:
A role describes a run_list of recipes that are executed on a node.

How might you specify which recipes are to be run on different sets of nodes, without manually modifying each nodes run_list each time a run_list change is required?

ex: reference role
------------------
{
	"name":"web"
	"description":"Role for our web server nodes for wordpress application",
	"json_class":"Chef::Role",
	"default_attributes":{
	
	},
	"override_attributes":{
	
	}
	"chef_type":"role",
	"run_list":[
		"recipe[apache2]"
		"recipe[apache2::websites]"
		"role[monitoring]"
	],
	"env_run_lists":{
	}
}

What about role[monitoring] included in the db, haproxy, and web roles we created?


Roles: Database
----------------
{
	"name":"databases"
	"description":"Database Servers For Our Wordpress Application",
	"json_class":"Chef::Role",
	"default_attributes":{
	
	},
	"override_attributes":{
	
	}
	"chef_type":"role",
	"run_list":[
		"recipe[postgreSQL]"
		"recipe[postgreSQL::create_databases]",
		"role[monitoring]"
	],
	"env_run_lists":{
	}
}

Roles: HAProxy
--------------
{
	"name":"haproxy"
	"description":"HAProxy load balancer for webnodes",
	"json_class":"Chef::Role",
	"default_attributes":{
	
	},
	"override_attributes":{
	
	}
	"chef_type":"role",
	"run_list":[
		"recipe[haproxy]",
		"role[monitoring]"
	],
	"env_run_lists":{
	}
}

Role: Monitoring
----------------
What about role[monitoring] included in the db, haproxy, and web roles we created?
{
	"name":"monitoring"
	"description":"Recipes that make up the monitoring stack required for all nodes",
	"json_class":"Chef::Role",
	"default_attributes":{
	
	},
	"override_attributes":{
	
	}
	"chef_type":"role",
	"run_list":[
		"recipe[nagios]",
		"recipe[collectd]"
	],
	"env_run_lists":{
	}
}

When you assign a role to a node you do so in its run list.
$knife node run_list set nodename "role[web]"
All recipes and roles assigned to the web role run list will be executed on this node.

After making a change to the roles, how can we force the new run list to execute on nodes with a given role assigned to them?
1. Wait for chef-client on the nodes to execute if chef-client is set to run at intervals.
2. Execute knife ssh

knife ssh "role:web" "sudo chef-client" -x user -P password

3. Creating Roles:
------------------
on GUI:
remove the 3 recipes we assigned

on workstation:

#which vim
#which nano
#export EDITOR=$(which vi)
ls -al
# vim .bashrc
place "export EDITOR=$(which vi)"
:wq!

cd chef-repo

#knife role create web

"run_list": [
	"recipe[apache]",
	"recipe[apache::websites]",
	"recipe[apache::motd]"
:wq!

#knife role edit web

#knife node run_list set centos-node2 "role[web]"

#knife role edit web
update below:
"run_list": [
	"recipe[apache]",
	"recipe[apache::websites]"
:wq!

#knife node show centos-node2

run chef-client from workstation:
knife ssh "role:web" "sudo chef-client" -x root -P

upload postgresql cookbook in to server
#knife cookbook upload postgresql

Create a database role:
knife role create database

"run_list": [
	"recipe[postgresql]"

:wq!

#knife node run_list set centos-node1 "role[database]"

cd cookbooks/postgresql/recipes/
vi default.rb

update
------
package 'postgresql-server' do
	notifies :run, 'execute[postgresql-init];, :immediately
end

:wq!

upload cookbook to knife server
#knife cookbook upload postgresql

run chef-client from workstation:
#knife ssh "role:database" "sudo chef-client" -x root -P

#knife ssh "role:database" "sudo systemctl status postgresql" -x user -P

#knife node show centos-node2
#knife node show centos-node1

4. Example_Using search in Recipes:
-----------------------------------
on workstation:

cd chef-repo
cd cookbooks/apache/recipes
vi websites.rb

add below:
webnodes = search ('node', 'role:web')

webnodes.each do |node|
	puts node
end

:wq!

knife cookbook upload apache

on client:
sudo chef-client

5. Environments:
----------------
Implementing Web Node Apache Cookbook Changes:
-----

Scenario: You've been tasked with making changes to the Apache cookbook from 1.0 to 2.0 versions. These changes need to go through the Testing, Q/A, and staging environments before production. How can we use the same roles for all environments, including production, but limit the cookbook version only to specific environments?

Cookbook Development(Apache 2.0) -> Testing Environment(Apache 2.0) -> Q/A Environment(Apache 2.0) -> Staging Environment(Apache 2.0) -> Production Environment(Apache 1.0)

Environments: Understanding Chef Environments

Every node belongs to the _default environment.
The _default environment cannot be modified.

Environments allow you to assign roles that contain a specific cookbook version to a group of nodes, while also allowing a certain cookbook version to execute given the environment "configurations".

A more simple way of thinking about it is "generally every environment is associated with one or more cookbooks or cookbook versions"

	name 'Production'
	description 'Production Environment'
	cookbook 'apache' '=1.0'
	
	name 'staging'
	description 'Staging Environment Before Production'
	cookbook 'apache','=2.0'

22.6 Bootstraping The staging node:
-----------------------------------
Build new Centos7

on workstation:
knife bootstrap <IPAddress> -N centos-node3 -x user -sudo

knife node list

knife node run_list centos-node 'role[web]'
knife role show web

cd cookbooks/apache
vi metadata.rb
update version from 1.0 to 2.0

knife cookbook upload apache

vi websites.rb
add 1.0

content 'Hello world! v1.0'

knife cookbook upload apache
:wq!

chanage metadata.rb, websites.rb

knife cookbook upload apache

22.7 Creating and using environments:
-------------------------------------
GUI --> Policy --> Environments --> new --> staging 2.0 --> new --> production

Assign the environments to nodes

chef-client on both the servers

GUI --> policy -> create new environment --> name "staging" -> name "apache" = 2.0.0 -> postgresql 2.0.0 -> Create Environment

Create production environment 
GUI --> policy -> create new environment --> name "staging" -> name "apache" = 1.0.0 -> postgresql 2.0.0 -> Create Environment

Select environments in GUI...

********************

run chef-client on both the nodes:

24.1 Infrastructure As Code:
----------------------------
Advantages and reasons of defining your infrastructure as code.
	-	Flexibility
	- 	Version Control of Infrastructure
	-	Human-readable infrstruture - the code is the documentation!
	-	Create testable infrastructures just like testable code!
	-	Easily scalable to thousands of systems, multiple clouds, and on-premises
	-	Use existing cookbooks created on Chef Supermarket as well as automate deployments and compliance.
	
Rolling back vs Rolling forward:
	-	Rolling backward: Roll back the environment or code to a previous state (Restore / Blue Green)
		Con: A roll back must succeed for ALL components in your environment or it fails, Generally a riskier method of fixing issues.
		
Rolling forward: Rolling forward means, understanding the current issue and implementing a permanent fix applied going forward. In cheff it is generally best practices to roll forward rather than roll backwards.


	
25.1 Imperative vs Declarative:
		- Chef is considered an imperative configuration management tool.
		- Ansible and Puppet are both considered declarative configuration management tools:
			But what is the difference imperative and Declarative Languages?
				-a) Imperative describes "how" you're going to implement the code(in our case, the chef configuration on a node},
				- b) Declarative describes "the end result" or the "desired result" but does not describe how to implement that result. That is left up to the executor.
	
	Think about SQL: SQL allows you to pull data from a database put doen't specify "how" to pull the data. It only specifies "what" data to pull.
	
	Puppet and Ansible: Specify the desired end result.
	
	Chef: Specify how you want the configuration to be put in place (How to get the end result)

	example : With Chef you can use "for each loops," but with puppet it is not allowed.

Getting Clearer:
	Chef Code(Ruby Syntax) The How --> Chef DSL : The What --> Chef : The Executor
	Puppet : The what --> Puppet : The Executor
	
Imperative approach provides more flexibility:

if node['platform'] == "debian"
	execute "install apache2" do
		command "apt-get install apache2 -y"
	end
end

Declarative approache is easier to implement:

package 'apache2'

With Chef, resources are executed in the order they are listed in the page.
	This is considered jan imperative approach because it places resources correctly within a recipe and allows the ability to determine execution order and "how" the configuration is put into place.

25.2 Push Vs Pull:

Push deployment occurs when the deployment of infrastructure changes are pushed from a central location(server) to the nodes.

Pull deployment is when each server polls/queries a central location for changes and applies those changes locally on the node.

Chef does both! Up until this point we've been working with "pull deployments" because chef-client runs in intervals and pulls cookbook changes from the server.

- Chef Push Jobs: Chef push jobs is a chef server extention that allows jobs to be executed against a node, without jthe dependency of a chef-client run.
- A separate agent is running on the node listening to the chef push jobs server for any jobs that might be sent.
- a job is an action or command that is to be executed against a set of nodes.
- a search query made to the chef server is what determines "which" nodes receive the push job.

knife SSH
----------
- Requires SSH keys or sudo permissions
- No corrective action if a job fails
- Hard to scale to large amounts of nodes
- Requires scripting if you want to schedule a command

Push Jobs:
- An installed agent much like chef-client is listening to the chef server and requires no addtional authentication.
- is a resource type that is managed with knife and recipes
- Can be used within recipes jto orchestrate actions between nodes.


27.1 Test Kitchen?
------------------
What is test kitchen? - Your infrastructure deserves tests too
- test kitchen is a test harnesss for your "infrastructure as code"
- Supports multiple platforms (i.e CentOS, Ubunut and Windows)
- Run your recipes on various cloud providers and hypervisors in isolation
- Use already familiar testing frameworks(i.e Rspec, Serverspec, etc)
- Test Kitchen also knows how to handle dependencies with cookbooks

Test Kitchen Encourages Test-Driven Development(TDD)
	-	Test-Driven Development is a software development process.
		-	Requirements are turned into tests
		-	Software is only improved to pass tests
	
	- TDD encourages simple designs
		- Test Kitchen allows you to apply the "red, green, refactor" workflow to your "code as infrastrue"
		
	- TDD Primer:
			Red --> Green --> Refactor
	1. Add a test
	2. Run all tests and see if the new test fails
	3. Write the code
	4. Run tests
	5. Refactor code
	6. Repeat

Getting started with test kitchen:
	The Kitchen command is included in the ChefDK
		or it can be installed via: gem install test-kitchen
	
	kitchen init	#Create a boilerplat
Commands:
	---------
	- kitchen init		#Create a boilerplate .kitchen.yml
	- kitchen list		#List all instances
	- kitchen create	#Create one or more instances
	- kitchen converge	#Converge one or more instances
	- kitchen verify	#Verify one or more instances
	- kitchen destroy	#Destroy one or more instances
	- kitchen test		#Executes kitchen {destroy, create, converge, verify, destroy} all-in-one
	- kitchen login		#Log in to one instance
	- kitchen help		#provides a list of available kitchen commands
	
Understanding .kitchen.yml
----
driver:
	name: vagrant
provisioner
	name: chef_zero
platforms:
	- name: centos-7.2
suites:
	- name: default
	run_list:
		-recipe[my_cookbook::default]
	attributes:

Driver: 
	- responsible for creating a machine that we'll use to test our cookbook
	- In this case, we are telling the Kitchen Driver to use vagrant to create an instance to test
Provisioner:
	- Responsible for telling Test Kitchen how to run chef to apply the cookbook to the instance in test
Platforms:
	- List of operating systems we want to run our infrastructure code against
Suites:
	- Defines what to test from our cookbook

27.2 Test Kitchen Hands on Example:
--------------
Provision new node
download chef-dk

#wget https://packages.chef.io/files/stable/chefdk/2.5.3/el/7/chefdk-2.5.3-1.el7.x86_64.rpm

#rpm -ivh chefdk-2.5.3-1.el7.x86_64.rpm

Install docker containers
#yum install -y docker

systemctl start docker
systemctl enable docker

install the docker test-kitchen plugin
chef exec gem install kitchen-docker

chef generate cookbook my_cookbook

cd my_cookbook

ls -al

#there we can see .kitchen.yml

---
driver:
	name: docker
provisioner:
	name: chef_zero
	always_update_cookbooks: true
verifier:
	name: inspec
platforms:
	- name: ubuntu-16.04
suites:
	- name: default
	run_list:
		- recipe[my_cookbook::default]
	verifier:
		inspec_tests:
			- test/smoke/default
	attributes:

:wq!

kitchen converge

kitchen list

kitchen verify

cd test
cd smoke/default

vim default_test.rb
<remove port 80 test>

Update with below:

describe package('cowsay') do
	it { should be_installed }
end

:wq!

#come back to cookbook dir
#kitchen verify

cd recipes
vi default.rb
package 'cowsay' 

:wq!

#come back to cookbook dir
#kitchen test

16.1 Open Source VS Premium:
----------------------------
Chef is an open source company and we belive that if you are building foundational software .. that software has to be open source; people have to be able to look at it; they have to be able to read it, fix bugs, make it their own.

ADAM JACOB : CTO-Co-Founder, Chef

How does open source apply to Chef?
	-	Chef's core product offerings are open source:
		- chef
		- habitat
		- inspec
Each core product has built a strong, open community:
	- You can browse recipes and compliance profiles for free in the Chef Supermarket
	- You can browse Habitat plans for free in the package registry
	- You can find and connect with community members:
		- Forum / Mailing List
		- Chat (IRC + Slack)
	- Product suggestions come from the community
	

Chef's Premium Offerings:
-------------------------
Chef Automate:
	- Workflow
	- visibility
	- Chef (Infrastructure Automation)
	- Habitat ( Application Automation)
	- INSPEC (Compliance Automation)

Chef Automate provides a centralized hub of information to unite your Dev and Ops Teams

Chef Support Subscriptions:
	- Standard
	- Premium
	- Customer Success
	
Chef Solution Services

Chef Training & Certifications

16.2 Habitat:
-------------
Habitat exists to solve the problem of how organizations build, deploy and manage applications

"What if we simply focused in on what it means to be easy to build, easy to manage, and easy to deploy?"

The Answer: Application Automation:
	-	Automation cannot come from the platform, but must travel with the application
	-	Runtime & infrastructure layers: decoupled
	
Habitat Benefits:
	- You can take an application, wrap it in a layer of application automation
	- The resulting package can be deployed on the infrastructure or runtime that suits it best.
	- You can manage it the same way whether it exists on premise, on top of a PaaS, or even in a container orchestration system
		- This is accomplished because of two main components:
			- A robust, safe, simple and secure software packaging system.
			- A supervisor which manages the lifecycle of the services declared in the packages

How do i use Habitat?
	- You can start with hab command line interface to scaffold a new project
	- you define a plan.sh with instructions to build and install the application.

16.3 Chef Compliance and InSpec:
--------------------------------
Compliance as Code:
	Chef Compliance is a standalone server that allows you to scan nodes to see if they match your compliance requirements
	Just like how recipes are "infrasture as code", compliance profiles are "compliance as code"
	"Compliance as COde" increases your:
		- Velocity
		- Consistency
		- scale
		- feedback
	DevOps principles now extend to your compliance and security teams!

Benefits of Chef Compliance:
------------
Chef Compliance is agentless:
	- No software needs to be preinstalled (not even chef) for compliance scans to occur
	- Scans on a Windows Operationing systems communicate over WinRM
	- Scans on a Linux OS communication over SSH









What is Chef Supermarket?
------------------------
Chef Supermarket is the site for community cookbooks
It provides an easily searchable cookbook repository and a friendly web UI
Cookbooks that are part of the Chef Supermarket accessible by any chef user

#knife cookbook list

We need to make sure that knife version is above 12.2

#knife -v

#knife cookbook site list

#knife cookbook site search ntp

#knife cookbook site show ntpd

#knife cookbook site show ntpd 0.2.0

#knife cookbook site download ntpd

#knife cookbook site install ntpd

#cd cookbooks
#cd ntpd

#knife cookbook upload ntpd
#knife cookbook upload list

***************
Chef Internals:
---------------
1. Node Object and Ohai
2. Using search in Chef
3. Chef Security and config files 

1. Node Object and Ohai

--What is an Attribute?
	+ An attribute is a specific detail about a node, such as IP Address, a host name, a list of loaded kernel modules, the version(s) of available programming languages that are available, and so on.
	+ An attribute may be unique to a specific node or it can be identical across every node in the organization.
	+ Attributes are most commonly set from a cookbook, by using knife, or are retrived by Ohai from each node prior to every chef-client run.
	+ All attributes are indexed for search on the Chef Server
	
-- What is Ohai?
	+ Ohai is a tool that is used to detect attributes on a node, and then provide these attributes to the chef-client at the start of every chef-client run.
	+ Ohai is required by the chef-client and must be present on a node(Ohai is installed on a node as part of the chef client install process)
	+ The types of attributes OHAI collects include (but are not limited to):
	+ The types of attributes OHAI collects include(but are not limited to):
		- Platform details
		- Network usage
		- Memory Usage
		- CPU data
		- Kernel data
		- Host names
		- Fully qualified domain names
		- Other configuration details
	http://chef.readthedocs.io/en/latest/ohai.html

- How to Chef Attributes of a Node:
	- Chef Server GUI
	- Chef Workstaion[knife node show]
	- Chef Node[ohai]
b. Chef Workstion:
#knife node list
#knife node show node2
#knife node show node2 -l 

check number of lines
#knife node show node2 -l | wc -l 

c. chef node
------------
#ohai
#ohai | wc -l
#ohai | less

- How to Use Attributes in a Recipe:

example 1: package "httpd" do
			action :install
		   end 

example 2: package 'Install Apache' do
			case node[:platform]
				when 'redhat', 'centos'
					package_name 'httpd'
				when 'ubuntu', 'debian'
					package_name 'apache2'
				end 
			end

2. How to use search in Chef
----------------------------
	- What is Chef Search:
		- Search indexes allow queries to be made for any type of data that is indexed by the Chef Server, including data bags(and data bag items), environments, nodes and roles.
		- A defined query syntax is used to support search patterns like exact, wildcard, range and fuzzy.
	
		- A search is a full-text query that can be done from several locations, including:
			- From within a recipe
			- By using the search subcommand in knife("knife search")
			- The search box in the Chef management console.
			- By using the /search/INDEX endpoints in the Chef server API

		- Search subcommand for knife has the following syntax:
			- $knife search INDEX SEARCH_QUERY
			- Where INDEX is one of client, environment, node, role, or the name of a data bag and SEARCH QUERY is the search query syntax for the query that will be executed.
			- Default value for INDEX is node.
	- Operators in Chef Search:
		- An operator can be used to ensure that certain terms are included in the results, are excluded from the results, or are not included even when other aspects of the query match.
		- Searches can use the following operators:
			- AND - Use to find a match when both terms exist.
			- OR - Use to find a match if either term exists
			- NOT - Use to exclude the term after NOT from the search results.
		
On chef workstation:
# knife node list
# knife search 'platform:ubunut"
# knife search 'platform:centos"
# knife search 'platform:*" -a macaddress
# knife search 'platform:*" -a uptime
# knife search 'platform:*" -a virtulization.system 
# knife search 'platform:*" -a kernel.version

#knife node show node1
#knife node show node2

#knife search node 'platform:ubuntu* AND role:database'
#knife search node 'platform:ubuntu* AND role:web'

#knife search node "(NOT role:web*)"

3. Chef Security and Configuration File:
------------------
- Security Files
- Configuration files in Chef
- How they work together?

Importent Files in Chef:
	-	knife.rb file is used to specify configuration details in knife
			- it is loaded every time this executable is run
			- it is not created by default
		It's located by default at:
			- ~/.chef/knife.rb(UNIX and Linux platforms) or 
			- C:\Users\username\.chef(Microsoft Windows Platform)
		- Will override the default configuration when a knife.rb file exists at the default path or the path specified by the --config option
	-	user.pem is used to authenticate with the chef server every time we run a knife command from Chef workstation
		- it is not created by default
		- it is located by default at:
			- ~/.chef/user.pem(UNIX and Linux platforms) or 
			- C:\Users\username\.chef(Microsoft Windows Platform)
	
	-	client.rb file used to specify the configuration details for the chef client
		- It is loaded every time this executable is run.
		- This file is created during bootstrapping process.
		- The default location for this file is at:
			- /etc/chef/client.rb(UNIX and Linux platforms) or
			- c:\chef\client.rb(Microsoft Windows Platform)
		- When a client.rb file is present in the default location, the settings contained within the client.rb will override the default configuration settings
	
	- client.pem - client.pem is used to authenticate the node with Chef Server every chef-client run 
		- This file is created during bootstrapping process
		- The default location for this file at:
			- /etc/chef/client.pem(UNIX and Linux platforms) or 
			- c:\chef\client.pem(Microsoft Windows Platform)
	
	- validation.pem - The validator key is used to create new clients on the Chef Server
		- This has been deprecated from Chef Version 12.2.0
		- It is downloaded on chef workstion as part of chef starter kit
		- It is copied(and renamed) to the nodes as part of the bootstrapping process
		- Default location for this file:
			- On chef workstation: ~/.chef/org-validator
			- on chef nodes: /etc/chef/validation.pem
			
	On workstation:
		cd chef-repo/.chef
		# cat knife.rb
		# cat user.pem
	
	on node:
		# cd /etc/chef 
		# ll
		# cat client.rb
